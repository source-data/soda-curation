# Use a CPU-only Python image as the base image
FROM python:3.8-slim-buster as base

# Set work directory
WORKDIR /app

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.8.0 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1 \
    PYSETUP_PATH="/app" \
    VENV_PATH="/app/.venv"

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 - --version ${POETRY_VERSION}

# Add Poetry to PATH
ENV PATH="$POETRY_HOME/bin:$VENV_PATH/bin:$PATH"

# Copy project files
COPY pyproject.toml poetry.lock* ./
COPY src ./src

# Install dependencies and the package
RUN poetry config virtualenvs.create false \
    && poetry install --no-interaction --no-ansi

# Copy the config file
COPY config.yaml /app/config.yaml

# Set PYTHONPATH
ENV PYTHONPATH=/app/src:$PYTHONPATH

# Create a directory for input files
RUN mkdir /app/input

# Verify key package installations
RUN poetry run python -c "import yaml; print(yaml.__file__)"
RUN poetry run python -c "import openai; print(openai.__file__)"
RUN poetry run python -c "import anthropic; print(anthropic.__file__)"

# Set the entrypoint to use Poetry to run the script
ENTRYPOINT ["poetry", "run", "python", "-m", "soda_curation.main"]

# Set default command (can be overridden)
CMD ["--zip", "/app/input/sample.zip", "--config", "/app/config.yaml"]
